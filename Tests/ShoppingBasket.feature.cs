// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Tests
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ShoppingBasketFeature : object, Xunit.IClassFixture<ShoppingBasketFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "ShoppingBasket.feature"
#line hidden
        
        public ShoppingBasketFeature(ShoppingBasketFeature.FixtureData fixtureData, Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ShoppingBasket", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
#line 5
testRunner.Given("the basket database is empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 6
testRunner.And("there are no user subscribers", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 7
testRunner.And("a new basket is instantiated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "RuleName"});
            table1.AddRow(new string[] {
                        "1",
                        "NoTax"});
            table1.AddRow(new string[] {
                        "2",
                        "Tax20Percent"});
            table1.AddRow(new string[] {
                        "3",
                        "Administration5poundTax"});
            table1.AddRow(new string[] {
                        "4",
                        "BandedTax2020"});
#line 8
testRunner.And("the following tax rules:", ((string)(null)), table1, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "NotificationSystemName",
                        "CommunicationType",
                        "CommunicationChannel",
                        "Logger"});
            table2.AddRow(new string[] {
                        "1",
                        "EmailNotificationSystem",
                        "email",
                        "..\\..\\..\\..Emails",
                        "ConsoleLogger"});
            table2.AddRow(new string[] {
                        "2",
                        "TextNotificationSystem",
                        "text",
                        "..\\..\\..\\..Phones",
                        "ConsoleLogger"});
#line 14
testRunner.And("the following notification systems", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "UserType",
                        "Email",
                        "PhoneNumber"});
            table3.AddRow(new string[] {
                        "1",
                        "Customer",
                        "albert@hotmail.co.uk",
                        "23855638"});
            table3.AddRow(new string[] {
                        "2",
                        "Retailer",
                        "belle@yahoo.co.uk",
                        "86120183"});
            table3.AddRow(new string[] {
                        "3",
                        "Customer",
                        "charlie@gmail.co.uk",
                        "41843576"});
            table3.AddRow(new string[] {
                        "4",
                        "Retailer",
                        "diana@outlook.co.uk",
                        "03110894"});
            table3.AddRow(new string[] {
                        "5",
                        "Customer",
                        "edward@aol.co.uk",
                        "84315325"});
#line 18
testRunner.And("the following users", ((string)(null)), table3, "And ");
#line hidden
#line 25
testRunner.And("all notification systems subscribe to the basket", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="A newly constructed basket has zero items")]
        [Xunit.TraitAttribute("FeatureTitle", "ShoppingBasket")]
        [Xunit.TraitAttribute("Description", "A newly constructed basket has zero items")]
        public virtual void ANewlyConstructedBasketHasZeroItems()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A newly constructed basket has zero items", null, ((string[])(null)));
#line 28
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 29
testRunner.Then("the basket has 0 items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="The totals of a newly constructed basket are all zero")]
        [Xunit.TraitAttribute("FeatureTitle", "ShoppingBasket")]
        [Xunit.TraitAttribute("Description", "The totals of a newly constructed basket are all zero")]
        public virtual void TheTotalsOfANewlyConstructedBasketAreAllZero()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The totals of a newly constructed basket are all zero", null, ((string[])(null)));
#line 31
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 32
testRunner.Then("all totals are 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Adding an item without an explicit quantity results in a quantity of 1 for the it" +
            "em")]
        [Xunit.TraitAttribute("FeatureTitle", "ShoppingBasket")]
        [Xunit.TraitAttribute("Description", "Adding an item without an explicit quantity results in a quantity of 1 for the it" +
            "em")]
        public virtual void AddingAnItemWithoutAnExplicitQuantityResultsInAQuantityOf1ForTheItem()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding an item without an explicit quantity results in a quantity of 1 for the it" +
                    "em", null, ((string[])(null)));
#line 35
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name",
                            "UnitPrice",
                            "Quantity",
                            "TaxRules"});
                table4.AddRow(new string[] {
                            "1",
                            "pasta",
                            "",
                            "",
                            ""});
#line 36
testRunner.When("the following items are added:", ((string)(null)), table4, "When ");
#line hidden
#line 39
testRunner.Then("the basket has 1 items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 40
testRunner.And("the item \'pasta\' has a quantity of 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="After adding a single item to an empty basket, both the basket and item quantity " +
            "are 1")]
        [Xunit.TraitAttribute("FeatureTitle", "ShoppingBasket")]
        [Xunit.TraitAttribute("Description", "After adding a single item to an empty basket, both the basket and item quantity " +
            "are 1")]
        public virtual void AfterAddingASingleItemToAnEmptyBasketBothTheBasketAndItemQuantityAre1()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("After adding a single item to an empty basket, both the basket and item quantity " +
                    "are 1", null, ((string[])(null)));
#line 42
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name",
                            "UnitPrice",
                            "Quantity",
                            "TaxRules"});
                table5.AddRow(new string[] {
                            "1",
                            "rice",
                            "",
                            "1",
                            ""});
#line 43
testRunner.When("the following items are added:", ((string)(null)), table5, "When ");
#line hidden
#line 46
testRunner.Then("the basket has 1 items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 47
testRunner.And("the item \'rice\' has a quantity of 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="After adding two items with different quantities to an empty basket, both the bas" +
            "ket and item quantities are correct")]
        [Xunit.TraitAttribute("FeatureTitle", "ShoppingBasket")]
        [Xunit.TraitAttribute("Description", "After adding two items with different quantities to an empty basket, both the bas" +
            "ket and item quantities are correct")]
        public virtual void AfterAddingTwoItemsWithDifferentQuantitiesToAnEmptyBasketBothTheBasketAndItemQuantitiesAreCorrect()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("After adding two items with different quantities to an empty basket, both the bas" +
                    "ket and item quantities are correct", null, ((string[])(null)));
#line 49
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name",
                            "UnitPrice",
                            "Quantity",
                            "TaxRules"});
                table6.AddRow(new string[] {
                            "1",
                            "bread",
                            "",
                            "3",
                            ""});
                table6.AddRow(new string[] {
                            "2",
                            "flour",
                            "",
                            "5",
                            ""});
#line 50
testRunner.When("the following items are added:", ((string)(null)), table6, "When ");
#line hidden
#line 54
testRunner.Then("the basket has 2 items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 55
testRunner.And("the item \'bread\' has a quantity of 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 56
testRunner.And("the item \'flour\' has a quantity of 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="After adding a single item to the basket, adding the same item again will update " +
            "the quantity of the previously added item")]
        [Xunit.TraitAttribute("FeatureTitle", "ShoppingBasket")]
        [Xunit.TraitAttribute("Description", "After adding a single item to the basket, adding the same item again will update " +
            "the quantity of the previously added item")]
        public virtual void AfterAddingASingleItemToTheBasketAddingTheSameItemAgainWillUpdateTheQuantityOfThePreviouslyAddedItem()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("After adding a single item to the basket, adding the same item again will update " +
                    "the quantity of the previously added item", null, ((string[])(null)));
#line 58
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name",
                            "UnitPrice",
                            "Quantity",
                            "TaxRules"});
                table7.AddRow(new string[] {
                            "1",
                            "butter",
                            "",
                            "4",
                            ""});
                table7.AddRow(new string[] {
                            "1",
                            "butter",
                            "",
                            "2",
                            ""});
#line 59
testRunner.When("the following items are added:", ((string)(null)), table7, "When ");
#line hidden
#line 63
testRunner.Then("the basket has 1 items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 64
testRunner.And("the item \'butter\' has a quantity of 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Adding an item with, or updating an item to a quantity of 0 or less will result i" +
            "n an ArgumentOutOfRangeException being thrown")]
        [Xunit.TraitAttribute("FeatureTitle", "ShoppingBasket")]
        [Xunit.TraitAttribute("Description", "Adding an item with, or updating an item to a quantity of 0 or less will result i" +
            "n an ArgumentOutOfRangeException being thrown")]
        public virtual void AddingAnItemWithOrUpdatingAnItemToAQuantityOf0OrLessWillResultInAnArgumentOutOfRangeExceptionBeingThrown()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding an item with, or updating an item to a quantity of 0 or less will result i" +
                    "n an ArgumentOutOfRangeException being thrown", null, ((string[])(null)));
#line 66
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name",
                            "UnitPrice",
                            "Quantity",
                            "TaxRules"});
                table8.AddRow(new string[] {
                            "1",
                            "eggs",
                            "",
                            "0",
                            ""});
#line 67
testRunner.When("the following items are added:", ((string)(null)), table8, "When ");
#line hidden
#line 70
testRunner.Then("A \'ArgumentOutOfRangeException\' exception is thrown with message \'Item quantity c" +
                        "annot be less than 1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Updating an item to a quantity of 0 or less will result in an ArgumentOutOfRangeE" +
            "xception being thrown")]
        [Xunit.TraitAttribute("FeatureTitle", "ShoppingBasket")]
        [Xunit.TraitAttribute("Description", "Updating an item to a quantity of 0 or less will result in an ArgumentOutOfRangeE" +
            "xception being thrown")]
        public virtual void UpdatingAnItemToAQuantityOf0OrLessWillResultInAnArgumentOutOfRangeExceptionBeingThrown()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Updating an item to a quantity of 0 or less will result in an ArgumentOutOfRangeE" +
                    "xception being thrown", null, ((string[])(null)));
#line 72
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name",
                            "UnitPrice",
                            "Quantity",
                            "TaxRules"});
                table9.AddRow(new string[] {
                            "1",
                            "cerial",
                            "",
                            "1",
                            ""});
                table9.AddRow(new string[] {
                            "1",
                            "cerial",
                            "",
                            "-1",
                            ""});
#line 73
testRunner.When("the following items are added:", ((string)(null)), table9, "When ");
#line hidden
#line 77
testRunner.Then("A \'ArgumentOutOfRangeException\' exception is thrown with message \'Item quantity c" +
                        "annot be less than 1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="After adding a single item to an empty basket, both the subtotal of the item and " +
            "basket should equal the items unit price")]
        [Xunit.TraitAttribute("FeatureTitle", "ShoppingBasket")]
        [Xunit.TraitAttribute("Description", "After adding a single item to an empty basket, both the subtotal of the item and " +
            "basket should equal the items unit price")]
        public virtual void AfterAddingASingleItemToAnEmptyBasketBothTheSubtotalOfTheItemAndBasketShouldEqualTheItemsUnitPrice()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("After adding a single item to an empty basket, both the subtotal of the item and " +
                    "basket should equal the items unit price", null, ((string[])(null)));
#line 80
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name",
                            "UnitPrice",
                            "Quantity",
                            "TaxRules"});
                table10.AddRow(new string[] {
                            "1",
                            "pasta",
                            "£1.23",
                            "",
                            ""});
#line 81
testRunner.When("the following items are added:", ((string)(null)), table10, "When ");
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name",
                            "Quantity",
                            "SubTotal",
                            "Tax",
                            "Total"});
                table11.AddRow(new string[] {
                            "1",
                            "pasta",
                            "1",
                            "£1.23",
                            "0",
                            "£1.23"});
#line 84
testRunner.Then("the basket contains the following items:", ((string)(null)), table11, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "SubTotal",
                            "Tax",
                            "Total"});
                table12.AddRow(new string[] {
                            "£1.23",
                            "0",
                            "£1.23"});
#line 87
testRunner.And("the basket has the following totals:", ((string)(null)), table12, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="After adding a single item (with a NoTax rule) to an empty basket, both the tax o" +
            "f the item and the basket should equal 0 and both the subtotal of the item and b" +
            "asket should equal the items unit price")]
        [Xunit.TraitAttribute("FeatureTitle", "ShoppingBasket")]
        [Xunit.TraitAttribute("Description", "After adding a single item (with a NoTax rule) to an empty basket, both the tax o" +
            "f the item and the basket should equal 0 and both the subtotal of the item and b" +
            "asket should equal the items unit price")]
        public virtual void AfterAddingASingleItemWithANoTaxRuleToAnEmptyBasketBothTheTaxOfTheItemAndTheBasketShouldEqual0AndBothTheSubtotalOfTheItemAndBasketShouldEqualTheItemsUnitPrice()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("After adding a single item (with a NoTax rule) to an empty basket, both the tax o" +
                    "f the item and the basket should equal 0 and both the subtotal of the item and b" +
                    "asket should equal the items unit price", null, ((string[])(null)));
#line 91
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name",
                            "Quantity",
                            "UnitPrice",
                            "TaxRuleIds"});
                table13.AddRow(new string[] {
                            "1",
                            "pasta",
                            "",
                            "£1.23",
                            "1"});
#line 92
testRunner.When("the following items are added:", ((string)(null)), table13, "When ");
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name",
                            "Quantity",
                            "SubTotal",
                            "Tax",
                            "Total"});
                table14.AddRow(new string[] {
                            "1",
                            "pasta",
                            "1",
                            "£1.23",
                            "0",
                            "£1.23"});
#line 95
testRunner.Then("the basket contains the following items:", ((string)(null)), table14, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "SubTotal",
                            "Tax",
                            "Total"});
                table15.AddRow(new string[] {
                            "£1.23",
                            "0",
                            "£1.23"});
#line 98
testRunner.And("the basket has the following totals:", ((string)(null)), table15, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="A percentage tax rule returns the correct totals for the basket and each item")]
        [Xunit.TraitAttribute("FeatureTitle", "ShoppingBasket")]
        [Xunit.TraitAttribute("Description", "A percentage tax rule returns the correct totals for the basket and each item")]
        public virtual void APercentageTaxRuleReturnsTheCorrectTotalsForTheBasketAndEachItem()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A percentage tax rule returns the correct totals for the basket and each item", null, ((string[])(null)));
#line 102
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name",
                            "Quantity",
                            "UnitPrice",
                            "TaxRuleIds"});
                table16.AddRow(new string[] {
                            "1",
                            "XBox",
                            "",
                            "£200",
                            "2"});
#line 103
testRunner.When("the following items are added:", ((string)(null)), table16, "When ");
#line hidden
                TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name",
                            "Quantity",
                            "SubTotal",
                            "Tax",
                            "Total"});
                table17.AddRow(new string[] {
                            "1",
                            "XBox",
                            "1",
                            "£200",
                            "£40",
                            "£240"});
#line 106
testRunner.Then("the basket contains the following items:", ((string)(null)), table17, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                            "SubTotal",
                            "Tax",
                            "Total"});
                table18.AddRow(new string[] {
                            "£200",
                            "£40",
                            "£240"});
#line 109
testRunner.And("the basket has the following totals:", ((string)(null)), table18, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="A flat administration tax rule returns the correct totals for the basket and each" +
            " item")]
        [Xunit.TraitAttribute("FeatureTitle", "ShoppingBasket")]
        [Xunit.TraitAttribute("Description", "A flat administration tax rule returns the correct totals for the basket and each" +
            " item")]
        public virtual void AFlatAdministrationTaxRuleReturnsTheCorrectTotalsForTheBasketAndEachItem()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A flat administration tax rule returns the correct totals for the basket and each" +
                    " item", null, ((string[])(null)));
#line 113
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name",
                            "Quantity",
                            "UnitPrice",
                            "TaxRuleIds"});
                table19.AddRow(new string[] {
                            "1",
                            "XBox",
                            "",
                            "£200",
                            "3"});
#line 114
testRunner.When("the following items are added:", ((string)(null)), table19, "When ");
#line hidden
                TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name",
                            "Quantity",
                            "SubTotal",
                            "Tax",
                            "Total"});
                table20.AddRow(new string[] {
                            "1",
                            "XBox",
                            "1",
                            "£200",
                            "£5",
                            "£205"});
#line 117
testRunner.Then("the basket contains the following items:", ((string)(null)), table20, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                            "SubTotal",
                            "Tax",
                            "Total"});
                table21.AddRow(new string[] {
                            "£200",
                            "£5",
                            "£205"});
#line 120
testRunner.And("the basket has the following totals:", ((string)(null)), table21, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="A banded tax rule returns the correct totals for the basket and each item")]
        [Xunit.TraitAttribute("FeatureTitle", "ShoppingBasket")]
        [Xunit.TraitAttribute("Description", "A banded tax rule returns the correct totals for the basket and each item")]
        public virtual void ABandedTaxRuleReturnsTheCorrectTotalsForTheBasketAndEachItem()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A banded tax rule returns the correct totals for the basket and each item", null, ((string[])(null)));
#line 124
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name",
                            "Quantity",
                            "UnitPrice",
                            "TaxRuleIds"});
                table22.AddRow(new string[] {
                            "1",
                            "XBox",
                            "",
                            "£200",
                            "4"});
#line 125
testRunner.When("the following items are added:", ((string)(null)), table22, "When ");
#line hidden
                TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name",
                            "Quantity",
                            "SubTotal",
                            "Tax",
                            "Total"});
                table23.AddRow(new string[] {
                            "1",
                            "XBox",
                            "1",
                            "£200",
                            "£25",
                            "£225"});
#line 128
testRunner.Then("the basket contains the following items:", ((string)(null)), table23, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                            "SubTotal",
                            "Tax",
                            "Total"});
                table24.AddRow(new string[] {
                            "£200",
                            "£25",
                            "£225"});
#line 131
testRunner.And("the basket has the following totals:", ((string)(null)), table24, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="An item with multiple tax rules returns the correct totals for the basket and eac" +
            "h item")]
        [Xunit.TraitAttribute("FeatureTitle", "ShoppingBasket")]
        [Xunit.TraitAttribute("Description", "An item with multiple tax rules returns the correct totals for the basket and eac" +
            "h item")]
        public virtual void AnItemWithMultipleTaxRulesReturnsTheCorrectTotalsForTheBasketAndEachItem()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("An item with multiple tax rules returns the correct totals for the basket and eac" +
                    "h item", null, ((string[])(null)));
#line 135
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name",
                            "Quantity",
                            "UnitPrice",
                            "TaxRuleIds"});
                table25.AddRow(new string[] {
                            "1",
                            "XBox",
                            "",
                            "£200",
                            "2,3"});
#line 136
testRunner.When("the following items are added:", ((string)(null)), table25, "When ");
#line hidden
                TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name",
                            "Quantity",
                            "SubTotal",
                            "Tax",
                            "Total"});
                table26.AddRow(new string[] {
                            "1",
                            "XBox",
                            "1",
                            "£200",
                            "£45",
                            "£245"});
#line 139
testRunner.Then("the basket contains the following items:", ((string)(null)), table26, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="After adding two items with different quantities (both with a NoTax rule) to an e" +
            "mpty basket, both the tax of the item and the basket should equal 0, both the su" +
            "btotal and the total of the item and basket should equal the items unit price")]
        [Xunit.TraitAttribute("FeatureTitle", "ShoppingBasket")]
        [Xunit.TraitAttribute("Description", "After adding two items with different quantities (both with a NoTax rule) to an e" +
            "mpty basket, both the tax of the item and the basket should equal 0, both the su" +
            "btotal and the total of the item and basket should equal the items unit price")]
        public virtual void AfterAddingTwoItemsWithDifferentQuantitiesBothWithANoTaxRuleToAnEmptyBasketBothTheTaxOfTheItemAndTheBasketShouldEqual0BothTheSubtotalAndTheTotalOfTheItemAndBasketShouldEqualTheItemsUnitPrice()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("After adding two items with different quantities (both with a NoTax rule) to an e" +
                    "mpty basket, both the tax of the item and the basket should equal 0, both the su" +
                    "btotal and the total of the item and basket should equal the items unit price", null, ((string[])(null)));
#line 143
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name",
                            "UnitPrice",
                            "Quantity",
                            "TaxRuleIds"});
                table27.AddRow(new string[] {
                            "1",
                            "pasta",
                            "50p",
                            "3",
                            "1"});
                table27.AddRow(new string[] {
                            "2",
                            "rice",
                            "£1",
                            "2",
                            "1"});
#line 144
testRunner.When("the following items are added:", ((string)(null)), table27, "When ");
#line hidden
                TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name",
                            "Quantity",
                            "SubTotal",
                            "Tax",
                            "Total"});
                table28.AddRow(new string[] {
                            "1",
                            "pasta",
                            "3",
                            "£1.50",
                            "0",
                            "£1.50"});
                table28.AddRow(new string[] {
                            "2",
                            "rice",
                            "2",
                            "£2",
                            "0",
                            "£2"});
#line 148
testRunner.Then("the basket contains the following items:", ((string)(null)), table28, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                            "SubTotal",
                            "Tax",
                            "Total"});
                table29.AddRow(new string[] {
                            "£3.50",
                            "0",
                            "£3.50"});
#line 152
testRunner.And("the basket has the following totals:", ((string)(null)), table29, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="After adding two items each with a different tax rule, totals should be correct f" +
            "or the basket and each item")]
        [Xunit.TraitAttribute("FeatureTitle", "ShoppingBasket")]
        [Xunit.TraitAttribute("Description", "After adding two items each with a different tax rule, totals should be correct f" +
            "or the basket and each item")]
        public virtual void AfterAddingTwoItemsEachWithADifferentTaxRuleTotalsShouldBeCorrectForTheBasketAndEachItem()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("After adding two items each with a different tax rule, totals should be correct f" +
                    "or the basket and each item", null, ((string[])(null)));
#line 156
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name",
                            "UnitPrice",
                            "Quantity",
                            "TaxRuleIds"});
                table30.AddRow(new string[] {
                            "1",
                            "pasta",
                            "50p",
                            "3",
                            "1"});
                table30.AddRow(new string[] {
                            "2",
                            "rice",
                            "£1",
                            "2",
                            "2"});
#line 157
testRunner.When("the following items are added:", ((string)(null)), table30, "When ");
#line hidden
                TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name",
                            "Quantity",
                            "SubTotal",
                            "Tax",
                            "Total"});
                table31.AddRow(new string[] {
                            "1",
                            "pasta",
                            "3",
                            "£1.50",
                            "0",
                            "£1.50"});
                table31.AddRow(new string[] {
                            "2",
                            "rice",
                            "2",
                            "£2",
                            "40p",
                            "£2.40"});
#line 161
testRunner.Then("the basket contains the following items:", ((string)(null)), table31, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                            "SubTotal",
                            "Tax",
                            "Total"});
                table32.AddRow(new string[] {
                            "£3.50",
                            "40p",
                            "£3.90"});
#line 165
testRunner.And("the basket has the following totals:", ((string)(null)), table32, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Email notifications are sent correctly when items are added and removed")]
        [Xunit.TraitAttribute("FeatureTitle", "ShoppingBasket")]
        [Xunit.TraitAttribute("Description", "Email notifications are sent correctly when items are added and removed")]
        public virtual void EmailNotificationsAreSentCorrectlyWhenItemsAreAddedAndRemoved()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Email notifications are sent correctly when items are added and removed", null, ((string[])(null)));
#line 170
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                            "UserId",
                            "CommunicationTypes"});
                table33.AddRow(new string[] {
                            "1",
                            "email"});
#line 171
testRunner.When("the users subscribe as follows for the communication types:", ((string)(null)), table33, "When ");
#line hidden
                TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name",
                            "UnitPrice",
                            "Quantity",
                            "TaxRules"});
                table34.AddRow(new string[] {
                            "1",
                            "pasta",
                            "",
                            "",
                            ""});
#line 174
testRunner.And("the following items are added:", ((string)(null)), table34, "And ");
#line hidden
#line 177
testRunner.And("items \'1\' are removed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                            "UserId",
                            "UserType",
                            "CommunicationType",
                            "Publisher",
                            "UpdateType"});
                table35.AddRow(new string[] {
                            "1",
                            "Customer",
                            "email",
                            "basket",
                            "add"});
                table35.AddRow(new string[] {
                            "1",
                            "Customer",
                            "email",
                            "item",
                            "add"});
                table35.AddRow(new string[] {
                            "1",
                            "Customer",
                            "email",
                            "basket",
                            "remove"});
                table35.AddRow(new string[] {
                            "1",
                            "Customer",
                            "email",
                            "item",
                            "remove"});
#line 178
testRunner.Then("only the following notifications are received", ((string)(null)), table35, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Text notifications are sent correctly when items are added and removed")]
        [Xunit.TraitAttribute("FeatureTitle", "ShoppingBasket")]
        [Xunit.TraitAttribute("Description", "Text notifications are sent correctly when items are added and removed")]
        public virtual void TextNotificationsAreSentCorrectlyWhenItemsAreAddedAndRemoved()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Text notifications are sent correctly when items are added and removed", null, ((string[])(null)));
#line 185
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                            "UserId",
                            "CommunicationTypes"});
                table36.AddRow(new string[] {
                            "2",
                            "text"});
#line 186
testRunner.When("the users subscribe as follows for the communication types:", ((string)(null)), table36, "When ");
#line hidden
                TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name",
                            "UnitPrice",
                            "Quantity",
                            "TaxRules"});
                table37.AddRow(new string[] {
                            "1",
                            "pasta",
                            "",
                            "",
                            ""});
#line 189
testRunner.And("the following items are added:", ((string)(null)), table37, "And ");
#line hidden
#line 192
testRunner.And("items \'1\' are removed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                            "UserId",
                            "UserType",
                            "CommunicationType",
                            "Publisher",
                            "UpdateType"});
                table38.AddRow(new string[] {
                            "2",
                            "Retailer",
                            "text",
                            "basket",
                            "add"});
                table38.AddRow(new string[] {
                            "2",
                            "Retailer",
                            "text",
                            "item",
                            "add"});
                table38.AddRow(new string[] {
                            "2",
                            "Retailer",
                            "text",
                            "basket",
                            "remove"});
                table38.AddRow(new string[] {
                            "2",
                            "Retailer",
                            "text",
                            "item",
                            "remove"});
#line 193
testRunner.Then("only the following notifications are received", ((string)(null)), table38, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="No notifications are sent on the attempted removal of a non existant item")]
        [Xunit.TraitAttribute("FeatureTitle", "ShoppingBasket")]
        [Xunit.TraitAttribute("Description", "No notifications are sent on the attempted removal of a non existant item")]
        public virtual void NoNotificationsAreSentOnTheAttemptedRemovalOfANonExistantItem()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("No notifications are sent on the attempted removal of a non existant item", null, ((string[])(null)));
#line 200
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                            "UserId",
                            "CommunicationTypes"});
                table39.AddRow(new string[] {
                            "3",
                            "email, text"});
#line 201
testRunner.When("the users subscribe as follows for the communication types:", ((string)(null)), table39, "When ");
#line hidden
#line 204
testRunner.And("items \'1\' are removed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 205
testRunner.Then("no notifications are received.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="No notifications are sent on the attempted addition using an invalid quantity")]
        [Xunit.TraitAttribute("FeatureTitle", "ShoppingBasket")]
        [Xunit.TraitAttribute("Description", "No notifications are sent on the attempted addition using an invalid quantity")]
        public virtual void NoNotificationsAreSentOnTheAttemptedAdditionUsingAnInvalidQuantity()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("No notifications are sent on the attempted addition using an invalid quantity", null, ((string[])(null)));
#line 207
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                            "UserId",
                            "CommunicationTypes"});
                table40.AddRow(new string[] {
                            "1",
                            "email"});
#line 208
testRunner.When("the users subscribe as follows for the communication types:", ((string)(null)), table40, "When ");
#line hidden
                TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name",
                            "UnitPrice",
                            "Quantity",
                            "TaxRules"});
                table41.AddRow(new string[] {
                            "1",
                            "eggs",
                            "",
                            "0",
                            ""});
                table41.AddRow(new string[] {
                            "2",
                            "cerial",
                            "",
                            "-1",
                            ""});
#line 211
testRunner.And("the following items are added:", ((string)(null)), table41, "And ");
#line hidden
#line 215
testRunner.Then("no notifications are received.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="All notifications are sent correctly for a variety of users and subscriptions")]
        [Xunit.TraitAttribute("FeatureTitle", "ShoppingBasket")]
        [Xunit.TraitAttribute("Description", "All notifications are sent correctly for a variety of users and subscriptions")]
        public virtual void AllNotificationsAreSentCorrectlyForAVarietyOfUsersAndSubscriptions()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("All notifications are sent correctly for a variety of users and subscriptions", null, ((string[])(null)));
#line 217
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                            "UserId",
                            "CommunicationTypes"});
                table42.AddRow(new string[] {
                            "1",
                            "email, text"});
                table42.AddRow(new string[] {
                            "2",
                            "email, text"});
                table42.AddRow(new string[] {
                            "3",
                            "email"});
                table42.AddRow(new string[] {
                            "4",
                            "text"});
                table42.AddRow(new string[] {
                            "5",
                            ""});
#line 218
testRunner.When("the users subscribe as follows for the communication types:", ((string)(null)), table42, "When ");
#line hidden
                TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name",
                            "UnitPrice",
                            "Quantity",
                            "TaxRules"});
                table43.AddRow(new string[] {
                            "1",
                            "pasta",
                            "",
                            "",
                            ""});
#line 225
testRunner.When("the following items are added:", ((string)(null)), table43, "When ");
#line hidden
                TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                            "UserId",
                            "UserType",
                            "CommunicationType",
                            "Publisher",
                            "UpdateType"});
                table44.AddRow(new string[] {
                            "1",
                            "Customer",
                            "email",
                            "basket",
                            "add"});
                table44.AddRow(new string[] {
                            "1",
                            "Customer",
                            "email",
                            "item",
                            "add"});
                table44.AddRow(new string[] {
                            "2",
                            "Retailer",
                            "email",
                            "basket",
                            "add"});
                table44.AddRow(new string[] {
                            "2",
                            "Retailer",
                            "email",
                            "item",
                            "add"});
                table44.AddRow(new string[] {
                            "3",
                            "Customer",
                            "email",
                            "basket",
                            "add"});
                table44.AddRow(new string[] {
                            "3",
                            "Customer",
                            "email",
                            "basket",
                            "add"});
                table44.AddRow(new string[] {
                            "1",
                            "Customer",
                            "text",
                            "basket",
                            "add"});
                table44.AddRow(new string[] {
                            "1",
                            "Customer",
                            "text",
                            "item",
                            "add"});
                table44.AddRow(new string[] {
                            "2",
                            "Retailer",
                            "text",
                            "basket",
                            "add"});
                table44.AddRow(new string[] {
                            "2",
                            "Retailer",
                            "text",
                            "item",
                            "add"});
                table44.AddRow(new string[] {
                            "4",
                            "Retailer",
                            "text",
                            "basket",
                            "add"});
                table44.AddRow(new string[] {
                            "4",
                            "Retailer",
                            "text",
                            "basket",
                            "add"});
#line 228
testRunner.Then("only the following notifications are received", ((string)(null)), table44, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                ShoppingBasketFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                ShoppingBasketFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
