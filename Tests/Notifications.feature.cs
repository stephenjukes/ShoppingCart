// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Tests
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class NotificationsFeature : object, Xunit.IClassFixture<NotificationsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Notifications.feature"
#line hidden
        
        public NotificationsFeature(NotificationsFeature.FixtureData fixtureData, Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Notifications", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
#line 5
testRunner.Given("the basket database is empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 6
testRunner.And("there are no user subscribers", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 7
testRunner.And("a new basket is instantiated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "RuleName"});
            table1.AddRow(new string[] {
                        "1",
                        "NoTax"});
            table1.AddRow(new string[] {
                        "2",
                        "Tax20Percent"});
            table1.AddRow(new string[] {
                        "3",
                        "Administration5poundTax"});
            table1.AddRow(new string[] {
                        "4",
                        "BandedTax2020"});
#line 8
testRunner.And("the following tax rules:", ((string)(null)), table1, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "NotificationSystemName",
                        "CommunicationType",
                        "CommunicationChannel"});
            table2.AddRow(new string[] {
                        "1",
                        "EmailNotification",
                        "email",
                        "..\\..\\..\\..Emails"});
            table2.AddRow(new string[] {
                        "2",
                        "TextNotification",
                        "text",
                        "..\\..\\..\\..Phones"});
#line 14
testRunner.And("the following notification systems", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "UserType",
                        "Email",
                        "PhoneNumber"});
            table3.AddRow(new string[] {
                        "1",
                        "Customer",
                        "albert@hotmail.co.uk",
                        "23855638"});
            table3.AddRow(new string[] {
                        "2",
                        "Retailer",
                        "belle@yahoo.co.uk",
                        "86120183"});
            table3.AddRow(new string[] {
                        "3",
                        "Customer",
                        "charlie@gmail.co.uk",
                        "41843576"});
            table3.AddRow(new string[] {
                        "4",
                        "Retailer",
                        "diana@outlook.co.uk",
                        "03110894"});
            table3.AddRow(new string[] {
                        "5",
                        "Customer",
                        "edward@aol.co.uk",
                        "84315325"});
#line 18
testRunner.And("the following users", ((string)(null)), table3, "And ");
#line hidden
#line 25
testRunner.And("all notification systems subscribe to the basket", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Email notifications are sent correctly when items are added and removed")]
        [Xunit.TraitAttribute("FeatureTitle", "Notifications")]
        [Xunit.TraitAttribute("Description", "Email notifications are sent correctly when items are added and removed")]
        public virtual void EmailNotificationsAreSentCorrectlyWhenItemsAreAddedAndRemoved()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Email notifications are sent correctly when items are added and removed", null, ((string[])(null)));
#line 27
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "UserId",
                            "CommunicationTypes"});
                table4.AddRow(new string[] {
                            "1",
                            "email"});
#line 28
testRunner.When("the users subscribe as follows for the communication types:", ((string)(null)), table4, "When ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name",
                            "UnitPrice",
                            "Quantity",
                            "TaxRules"});
                table5.AddRow(new string[] {
                            "1",
                            "pasta",
                            "",
                            "",
                            ""});
#line 31
testRunner.And("the following items are added:", ((string)(null)), table5, "And ");
#line hidden
#line 34
testRunner.And("items \'1\' are removed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "UserId",
                            "UserType",
                            "CommunicationType",
                            "Publisher",
                            "UpdateType"});
                table6.AddRow(new string[] {
                            "1",
                            "Customer",
                            "email",
                            "basket",
                            "add"});
                table6.AddRow(new string[] {
                            "1",
                            "Customer",
                            "email",
                            "item",
                            "add"});
                table6.AddRow(new string[] {
                            "1",
                            "Customer",
                            "email",
                            "basket",
                            "remove"});
                table6.AddRow(new string[] {
                            "1",
                            "Customer",
                            "email",
                            "item",
                            "remove"});
#line 35
testRunner.Then("only the following notifications are received", ((string)(null)), table6, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Text notifications are sent correctly when items are added and removed")]
        [Xunit.TraitAttribute("FeatureTitle", "Notifications")]
        [Xunit.TraitAttribute("Description", "Text notifications are sent correctly when items are added and removed")]
        public virtual void TextNotificationsAreSentCorrectlyWhenItemsAreAddedAndRemoved()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Text notifications are sent correctly when items are added and removed", null, ((string[])(null)));
#line 42
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "UserId",
                            "CommunicationTypes"});
                table7.AddRow(new string[] {
                            "2",
                            "text"});
#line 43
testRunner.When("the users subscribe as follows for the communication types:", ((string)(null)), table7, "When ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name",
                            "UnitPrice",
                            "Quantity",
                            "TaxRules"});
                table8.AddRow(new string[] {
                            "1",
                            "pasta",
                            "",
                            "",
                            ""});
#line 46
testRunner.And("the following items are added:", ((string)(null)), table8, "And ");
#line hidden
#line 49
testRunner.And("items \'1\' are removed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "UserId",
                            "UserType",
                            "CommunicationType",
                            "Publisher",
                            "UpdateType"});
                table9.AddRow(new string[] {
                            "2",
                            "Retailer",
                            "text",
                            "basket",
                            "add"});
                table9.AddRow(new string[] {
                            "2",
                            "Retailer",
                            "text",
                            "item",
                            "add"});
                table9.AddRow(new string[] {
                            "2",
                            "Retailer",
                            "text",
                            "basket",
                            "remove"});
                table9.AddRow(new string[] {
                            "2",
                            "Retailer",
                            "text",
                            "item",
                            "remove"});
#line 50
testRunner.Then("only the following notifications are received", ((string)(null)), table9, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="No notifications are sent on the attempted removal of a non existant item")]
        [Xunit.TraitAttribute("FeatureTitle", "Notifications")]
        [Xunit.TraitAttribute("Description", "No notifications are sent on the attempted removal of a non existant item")]
        public virtual void NoNotificationsAreSentOnTheAttemptedRemovalOfANonExistantItem()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("No notifications are sent on the attempted removal of a non existant item", null, ((string[])(null)));
#line 58
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "UserId",
                            "CommunicationTypes"});
                table10.AddRow(new string[] {
                            "3",
                            "email, text"});
#line 59
testRunner.When("the users subscribe as follows for the communication types:", ((string)(null)), table10, "When ");
#line hidden
#line 62
testRunner.And("items \'1\' are removed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 64
testRunner.Then("no notifications are received.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="No notifications are sent on the attempted addition using an invalid quantity")]
        [Xunit.TraitAttribute("FeatureTitle", "Notifications")]
        [Xunit.TraitAttribute("Description", "No notifications are sent on the attempted addition using an invalid quantity")]
        public virtual void NoNotificationsAreSentOnTheAttemptedAdditionUsingAnInvalidQuantity()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("No notifications are sent on the attempted addition using an invalid quantity", null, ((string[])(null)));
#line 66
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "UserId",
                            "CommunicationTypes"});
                table11.AddRow(new string[] {
                            "1",
                            "email"});
#line 67
testRunner.When("the users subscribe as follows for the communication types:", ((string)(null)), table11, "When ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name",
                            "UnitPrice",
                            "Quantity",
                            "TaxRules"});
                table12.AddRow(new string[] {
                            "1",
                            "eggs",
                            "",
                            "0",
                            ""});
                table12.AddRow(new string[] {
                            "2",
                            "cerial",
                            "",
                            "-1",
                            ""});
#line 70
testRunner.And("the following items are added:", ((string)(null)), table12, "And ");
#line hidden
#line 74
testRunner.Then("no notifications are received.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="All notifications are sent correctly for a variety of users and subscriptions")]
        [Xunit.TraitAttribute("FeatureTitle", "Notifications")]
        [Xunit.TraitAttribute("Description", "All notifications are sent correctly for a variety of users and subscriptions")]
        public virtual void AllNotificationsAreSentCorrectlyForAVarietyOfUsersAndSubscriptions()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("All notifications are sent correctly for a variety of users and subscriptions", null, ((string[])(null)));
#line 77
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "UserId",
                            "CommunicationTypes"});
                table13.AddRow(new string[] {
                            "1",
                            "email, text"});
                table13.AddRow(new string[] {
                            "2",
                            "email, text"});
                table13.AddRow(new string[] {
                            "3",
                            "email"});
                table13.AddRow(new string[] {
                            "4",
                            "text"});
                table13.AddRow(new string[] {
                            "5",
                            ""});
#line 78
testRunner.When("the users subscribe as follows for the communication types:", ((string)(null)), table13, "When ");
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name",
                            "UnitPrice",
                            "Quantity",
                            "TaxRules"});
                table14.AddRow(new string[] {
                            "1",
                            "pasta",
                            "",
                            "",
                            ""});
#line 87
testRunner.When("the following items are added:", ((string)(null)), table14, "When ");
#line hidden
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "UserId",
                            "UserType",
                            "CommunicationType",
                            "Publisher",
                            "UpdateType"});
                table15.AddRow(new string[] {
                            "1",
                            "Customer",
                            "email",
                            "basket",
                            "add"});
                table15.AddRow(new string[] {
                            "1",
                            "Customer",
                            "email",
                            "item",
                            "add"});
                table15.AddRow(new string[] {
                            "2",
                            "Retailer",
                            "email",
                            "basket",
                            "add"});
                table15.AddRow(new string[] {
                            "2",
                            "Retailer",
                            "email",
                            "item",
                            "add"});
                table15.AddRow(new string[] {
                            "3",
                            "Customer",
                            "email",
                            "basket",
                            "add"});
                table15.AddRow(new string[] {
                            "3",
                            "Customer",
                            "email",
                            "basket",
                            "add"});
                table15.AddRow(new string[] {
                            "1",
                            "Customer",
                            "text",
                            "basket",
                            "add"});
                table15.AddRow(new string[] {
                            "1",
                            "Customer",
                            "text",
                            "item",
                            "add"});
                table15.AddRow(new string[] {
                            "2",
                            "Retailer",
                            "text",
                            "basket",
                            "add"});
                table15.AddRow(new string[] {
                            "2",
                            "Retailer",
                            "text",
                            "item",
                            "add"});
                table15.AddRow(new string[] {
                            "4",
                            "Retailer",
                            "text",
                            "basket",
                            "add"});
                table15.AddRow(new string[] {
                            "4",
                            "Retailer",
                            "text",
                            "basket",
                            "add"});
#line 90
testRunner.Then("only the following notifications are received", ((string)(null)), table15, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                NotificationsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                NotificationsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
